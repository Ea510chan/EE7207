[[ .]
 [.]
 [ .]
 [.]
 [ .]
 [.]
 [ .]
 [.]
 [ .]
 [.]
 [ .]
 [.]
 [ 1.]
 [ 1.]
 [ 1.]
 [-1.]
 [ 1.]
 [-1.]
 [ 1.]
 [-1.]
 [ 1.]]
[ 1 -1  1 -1  1 -1  1 -1  1 -1  1 -1  1  1  1 -1  1 -1  1 -1  1]
StratifiedKFold(n_splits=5, random_state=5, shuffle=True)
ACC using SVM: 0.9586081363458273 | Valid: 0.9304657655010284
Best: 0.787206 using {'gamma': 0.34, 'num_neurons': 70}
0.535880  with:   {'gamma': 0.01, 'num_neurons': 10}
0.535126  with:   {'gamma': 0.01, 'num_neurons': 20}
0.548724  with:   {'gamma': 0.01, 'num_neurons': 30}
0.508432  with:   {'gamma': 0.01, 'num_neurons': 40}
0.548221  with:   {'gamma': 0.01, 'num_neurons': 50}
0.548472  with:   {'gamma': 0.01, 'num_neurons': 60}
0.548976  with:   {'gamma': 0.01, 'num_neurons': 70}
0.548976  with:   {'gamma': 0.01, 'num_neurons': 80}
0.628302  with:   {'gamma': 0.01, 'num_neurons': 90}
0.561316  with:   {'gamma': 0.01, 'num_neurons': 100}
0.695036  with:   {'gamma': 0.12, 'num_neurons': 10}
0.655247  with:   {'gamma': 0.12, 'num_neurons': 20}
0.735076  with:   {'gamma': 0.12, 'num_neurons': 30}
0.708131  with:   {'gamma': 0.12, 'num_neurons': 40}
0.694784  with:   {'gamma': 0.12, 'num_neurons': 50}
0.747668  with:   {'gamma': 0.12, 'num_neurons': 60}
0.681437  with:   {'gamma': 0.12, 'num_neurons': 70}
0.641397  with:   {'gamma': 0.12, 'num_neurons': 80}
0.694533  with:   {'gamma': 0.12, 'num_neurons': 90}
0.681437  with:   {'gamma': 0.12, 'num_neurons': 100}
0.668342  with:   {'gamma': 0.23, 'num_neurons': 10}
0.761267  with:   {'gamma': 0.23, 'num_neurons': 20}
0.747920  with:   {'gamma': 0.23, 'num_neurons': 30}
0.774362  with:   {'gamma': 0.23, 'num_neurons': 40}
0.761015  with:   {'gamma': 0.23, 'num_neurons': 50}
0.734070  with:   {'gamma': 0.23, 'num_neurons': 60}
0.734322  with:   {'gamma': 0.23, 'num_neurons': 70}
0.720723  with:   {'gamma': 0.23, 'num_neurons': 80}
0.734573  with:   {'gamma': 0.23, 'num_neurons': 90}
0.694281  with:   {'gamma': 0.23, 'num_neurons': 100}
0.654744  with:   {'gamma': 0.34, 'num_neurons': 10}
0.681437  with:   {'gamma': 0.34, 'num_neurons': 20}
0.774362  with:   {'gamma': 0.34, 'num_neurons': 30}
0.707628  with:   {'gamma': 0.34, 'num_neurons': 40}
0.734070  with:   {'gamma': 0.34, 'num_neurons': 50}
0.747920  with:   {'gamma': 0.34, 'num_neurons': 60}
0.787206  with:   {'gamma': 0.34, 'num_neurons': 70}
0.747417  with:   {'gamma': 0.34, 'num_neurons': 80}
0.708131  with:   {'gamma': 0.34, 'num_neurons': 90}
0.774614  with:   {'gamma': 0.34, 'num_neurons': 100}
0.655247  with:   {'gamma': 0.45, 'num_neurons': 10}
0.721478  with:   {'gamma': 0.45, 'num_neurons': 20}
0.667588  with:   {'gamma': 0.45, 'num_neurons': 30}
0.747920  with:   {'gamma': 0.45, 'num_neurons': 40}
0.721226  with:   {'gamma': 0.45, 'num_neurons': 50}
0.694281  with:   {'gamma': 0.45, 'num_neurons': 60}
0.720975  with:   {'gamma': 0.45, 'num_neurons': 70}
0.733818  with:   {'gamma': 0.45, 'num_neurons': 80}
0.760512  with:   {'gamma': 0.45, 'num_neurons': 90}
0.773859  with:   {'gamma': 0.45, 'num_neurons': 100}
0.667839  with:   {'gamma': 0.56, 'num_neurons': 10}
0.680934  with:   {'gamma': 0.56, 'num_neurons': 20}
0.734322  with:   {'gamma': 0.56, 'num_neurons': 30}
0.734322  with:   {'gamma': 0.56, 'num_neurons': 40}
0.747417  with:   {'gamma': 0.56, 'num_neurons': 50}
0.720723  with:   {'gamma': 0.56, 'num_neurons': 60}
0.747165  with:   {'gamma': 0.56, 'num_neurons': 70}
0.760512  with:   {'gamma': 0.56, 'num_neurons': 80}
0.760764  with:   {'gamma': 0.56, 'num_neurons': 90}
0.614200  with:   {'gamma': 0.56, 'num_neurons': 100}
0.654241  with:   {'gamma': 0.67, 'num_neurons': 10}
0.747668  with:   {'gamma': 0.67, 'num_neurons': 20}
0.720975  with:   {'gamma': 0.67, 'num_neurons': 30}
0.747668  with:   {'gamma': 0.67, 'num_neurons': 40}
0.734322  with:   {'gamma': 0.67, 'num_neurons': 50}
0.720975  with:   {'gamma': 0.67, 'num_neurons': 60}
0.747668  with:   {'gamma': 0.67, 'num_neurons': 70}
0.773859  with:   {'gamma': 0.67, 'num_neurons': 80}
0.734070  with:   {'gamma': 0.67, 'num_neurons': 90}
0.694533  with:   {'gamma': 0.67, 'num_neurons': 100}
0.654492  with:   {'gamma': 0.78, 'num_neurons': 10}
0.680934  with:   {'gamma': 0.78, 'num_neurons': 20}
0.680934  with:   {'gamma': 0.78, 'num_neurons': 30}
0.734322  with:   {'gamma': 0.78, 'num_neurons': 40}
0.720975  with:   {'gamma': 0.78, 'num_neurons': 50}
0.707628  with:   {'gamma': 0.78, 'num_neurons': 60}
0.720723  with:   {'gamma': 0.78, 'num_neurons': 70}
0.747668  with:   {'gamma': 0.78, 'num_neurons': 80}
0.747668  with:   {'gamma': 0.78, 'num_neurons': 90}
0.654241  with:   {'gamma': 0.78, 'num_neurons': 100}
0.614452  with:   {'gamma': 0.89, 'num_neurons': 10}
0.694281  with:   {'gamma': 0.89, 'num_neurons': 20}
0.694281  with:   {'gamma': 0.89, 'num_neurons': 30}
0.667588  with:   {'gamma': 0.89, 'num_neurons': 40}
0.707628  with:   {'gamma': 0.89, 'num_neurons': 50}
0.720975  with:   {'gamma': 0.89, 'num_neurons': 60}
0.694281  with:   {'gamma': 0.89, 'num_neurons': 70}
0.707628  with:   {'gamma': 0.89, 'num_neurons': 80}
0.720975  with:   {'gamma': 0.89, 'num_neurons': 90}
0.320319  with:   {'gamma': 0.89, 'num_neurons': 100}
0.641145  with:   {'gamma': 1.0, 'num_neurons': 10}
0.587758  with:   {'gamma': 1.0, 'num_neurons': 20}
0.707628  with:   {'gamma': 1.0, 'num_neurons': 30}
0.734322  with:   {'gamma': 1.0, 'num_neurons': 40}
0.654241  with:   {'gamma': 1.0, 'num_neurons': 50}
0.707628  with:   {'gamma': 1.0, 'num_neurons': 60}
0.720975  with:   {'gamma': 1.0, 'num_neurons': 70}
0.760764  with:   {'gamma': 1.0, 'num_neurons': 80}
0.773859  with:   {'gamma': 1.0, 'num_neurons': 90}
0.601105  with:   {'gamma': 1.0, 'num_neurons': 100}
[[ 1. -1.  1. -1.  1. -1.  1. -1.  1. -1.  1. -1.  1.  1.  1. -1.  1. -1.
   1. -1.  1.]]

[0.96969697 0.93939394 0.84848485 0.90909091 0.90909091 0.90909091
 0.96969697 1.         1.         0.90909091]
F:\Desktop\EE7207 CA1\venv\lib\site-packages\sklearn\utils\validation.py:63: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().
  return f(*args, **kwargs)
F:\Desktop\EE7207 CA1\venv\lib\site-packages\sklearn\utils\validation.py:63: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().
  return f(*args, **kwargs)
F:\Desktop\EE7207 CA1\venv\lib\site-packages\sklearn\utils\validation.py:63: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().
  return f(*args, **kwargs)
F:\Desktop\EE7207 CA1\venv\lib\site-packages\sklearn\utils\validation.py:63: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().
  return f(*args, **kwargs)
ACC using SVM: 0.9798060598145488 | Valid: 0.9425139582721128
Best: 0.936364 using {'C': 1, 'gamma': 1, 'kernel': 'rbf'}
0.648485  with:   {'C': 0.001, 'gamma': 0.001, 'kernel': 'rbf'}
0.648485  with:   {'C': 0.001, 'gamma': 0.01, 'kernel': 'rbf'}
0.648485  with:   {'C': 0.001, 'gamma': 0.1, 'kernel': 'rbf'}
0.648485  with:   {'C': 0.001, 'gamma': 1, 'kernel': 'rbf'}
0.648485  with:   {'C': 0.001, 'gamma': 10, 'kernel': 'rbf'}
0.648485  with:   {'C': 0.001, 'gamma': 100, 'kernel': 'rbf'}
0.648485  with:   {'C': 0.01, 'gamma': 0.001, 'kernel': 'rbf'}
0.648485  with:   {'C': 0.01, 'gamma': 0.01, 'kernel': 'rbf'}
0.648485  with:   {'C': 0.01, 'gamma': 0.1, 'kernel': 'rbf'}
0.648485  with:   {'C': 0.01, 'gamma': 1, 'kernel': 'rbf'}
0.648485  with:   {'C': 0.01, 'gamma': 10, 'kernel': 'rbf'}
0.648485  with:   {'C': 0.01, 'gamma': 100, 'kernel': 'rbf'}
0.648485  with:   {'C': 0.1, 'gamma': 0.001, 'kernel': 'rbf'}
0.648485  with:   {'C': 0.1, 'gamma': 0.01, 'kernel': 'rbf'}
0.693939  with:   {'C': 0.1, 'gamma': 0.1, 'kernel': 'rbf'}
0.912121  with:   {'C': 0.1, 'gamma': 1, 'kernel': 'rbf'}
0.648485  with:   {'C': 0.1, 'gamma': 10, 'kernel': 'rbf'}
0.648485  with:   {'C': 0.1, 'gamma': 100, 'kernel': 'rbf'}
0.648485  with:   {'C': 1, 'gamma': 0.001, 'kernel': 'rbf'}
0.727273  with:   {'C': 1, 'gamma': 0.01, 'kernel': 'rbf'}
0.896970  with:   {'C': 1, 'gamma': 0.1, 'kernel': 'rbf'}
0.936364  with:   {'C': 1, 'gamma': 1, 'kernel': 'rbf'}
0.866667  with:   {'C': 1, 'gamma': 10, 'kernel': 'rbf'}
0.654545  with:   {'C': 1, 'gamma': 100, 'kernel': 'rbf'}
0.724242  with:   {'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}
0.869697  with:   {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}
0.918182  with:   {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}
0.936364  with:   {'C': 10, 'gamma': 1, 'kernel': 'rbf'}
0.857576  with:   {'C': 10, 'gamma': 10, 'kernel': 'rbf'}
0.654545  with:   {'C': 10, 'gamma': 100, 'kernel': 'rbf'}
0.866667  with:   {'C': 100, 'gamma': 0.001, 'kernel': 'rbf'}
0.900000  with:   {'C': 100, 'gamma': 0.01, 'kernel': 'rbf'}
0.927273  with:   {'C': 100, 'gamma': 0.1, 'kernel': 'rbf'}
0.903030  with:   {'C': 100, 'gamma': 1, 'kernel': 'rbf'}
0.857576  with:   {'C': 100, 'gamma': 10, 'kernel': 'rbf'}
0.654545  with:   {'C': 100, 'gamma': 100, 'kernel': 'rbf'}
[ 1 -1  1 -1  1 -1  1 -1  1 -1  1 -1  1  1  1 -1  1 -1  1 -1  1]